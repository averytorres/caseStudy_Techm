# -- Login --
login.userName=User Name
login.password=Password
login.userName.problem=User name can not be blank
login.password.problem=password can not be blank

# -- Rep Login --
replogin.repName=Rep Email ID:
replogin.repPass=Password:
error.repName.required = Rep Name is required.
error.repPass.required = Rep Password is required.
error.repEmail.required= Rep Email ID is Required.
# -- Rep Register --
repregister.repName=Rep Name:
repregister.repPass=Rep Pass:
repregister.repEmail=Rep Email:

#-- Cust Login --
custlogin.custEmail=Email:
custlogin.custPass=Password:

# -- Rep Home --
repHome.tvPlan=TV Plan:
repHome.internetPlan=Internet Plan:

# -- Rep Cust Info --
repcustinfo.repFName=Cust First Name:
repcustinfo.repLName=Cust Last Name:
repcustinfo.repSSN=Cust SSN:
repcustinfo.repAddress=Cust Address:
repcustinfo.repPhone=Cust Phone:
repcustinfo.repEmail=Cust Email:
repcustinfo.repSecurityQ=Cust Security Question:
repcustinfo.repSecurityA=Security Question Answer:
repcustinfo.repPassword=Password:
			error.custEmail.required=Customer Email Field Required!
			error.custlName.required=Customer Last Name Field Required!
			error.custSSN.required=Customer SSN Field Required!
			error.custAddress.required=Customer Address Field Required!
			error.custPhone.required=Customer Phone Field Required!
			error.custFName.required=Customer First Name Field Required!
			error.custSecurityQ.required=Customer Security Question Field Required!
			error.custSecurityA.required=Customer Security Answer Field Required!
			error.custPassword.required=Customer Password Field Required!
			error.custTvPlan.required=Customer TV Plan Field Required!
			error.custInternetPlan.required=Customer Internet Plan Field Required!

error.custEmail2.required=Email Field Required!
error.custPassword2.required=Password Field Required!

# -- Register --
register.un=User Name
register.pw=Password
register.email=email
register.gender=gender
register.interest=interest
register.sql.exception=user already there

# -- standard errors --
errors.header=<UL>
errors.prefix=<LI>
errors.suffix=</LI>
errors.footer=</UL>
# -- validator --
errors.invalid={0} is invalid.
errors.maxlength={0} can not be greater than {1} characters.
errors.minlength={0} can not be less than {1} characters.
errors.range={0} is not in the range {1} through {2}.
errors.required={0} is required.
errors.byte={0} must be an byte.
errors.date={0} is not a date.
errors.double={0} must be an double.
errors.float={0} must be an float.
errors.integer={0} must be an integer.
errors.long={0} must be an long.
errors.short={0} must be an short.
errors.creditcard={0} is not a valid credit card number.
errors.email={0} is an invalid e-mail address.
# -- other --
errors.cancel=Operation cancelled.
errors.detail={0}
errors.general=The process did not complete. Details should follow.
errors.token=Request could not be completed. Operation is not in sequence.
# -- welcome --
welcome.title=Struts Blank Application
welcome.heading=Welcome!
welcome.message=To get started on your own application, copy the struts-blank.war to a new WAR file using the name for your application. Place it in your container's "webapp" folder (or equivalent), and let your container auto-deploy the application. Edit the skeleton configuration files as needed, restart your container, and you are on your way! (You can find the application.properties file with this message in the /WEB-INF/src/java/resources folder.)
